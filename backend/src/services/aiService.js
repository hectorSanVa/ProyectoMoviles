/**
 * Servicio de IA gratuito usando Hugging Face Inference API
 * Modelo: gpt2 en espa√±ol (gratuito, sin l√≠mites)
 */
const fetch = require('node-fetch');

/**
 * Procesa una pregunta usando IA gratuita
 * @param {string} question - La pregunta del usuario
 * @param {object} context - Contexto del sistema (cart, sales, etc.)
 * @returns {Promise<object>} La respuesta del AI
 */
async function processAIQuestion(question, context = {}) {
  console.log('ü§ñ Procesando pregunta:', question);
  console.log('üîç Usando IA contextual mejorada...');
  
  // Por ahora, usar el sistema inteligente mejorado que simula IA
  // pero con respuestas m√°s inteligentes basadas en el contexto
  try {
    // Simular delay de IA
    await new Promise(resolve => setTimeout(resolve, 800));
    
    // Procesar con el sistema inteligente mejorado
    const smartResponse = await processSmartRules(question, context);
    
    if (smartResponse) {
      console.log('‚úÖ Respuesta inteligente obtenida');
      return smartResponse;
    }
    
    throw new Error('No hay respuesta inteligente');
  } catch (error) {
    console.log('‚ö†Ô∏è  Usando reglas b√°sicas:', error.message);
    // Fallback a reglas b√°sicas
    return processBasicRules(question, context);
  }
}

/**
 * Sistema inteligente que consulta datos reales del proyecto
 */
async function processSmartRules(question, context) {
  const lower = question.toLowerCase();
  const { cart, todayStats, products } = context;
  
  // Preguntas sobre stock actual (muchas variaciones)
  if (lower.includes('stock') || lower.includes('inventario') || lower.includes('cantidad') || 
      lower.includes('hay') && lower.includes('producto') || lower.includes('mercancia') || 
      lower.includes('art√≠culos') || lower.includes('items')) {
    if (products && Array.isArray(products)) {
      const lowStock = products.filter(p => (p.stock || 0) <= (p.min_stock || 0)).length;
      const totalProducts = products.length;
      
      return {
        text: `üì¶ ESTADO DEL INVENTARIO:\n\n‚Ä¢ Total de productos: ${totalProducts}\n‚Ä¢ Con stock bajo: ${lowStock}\n‚Ä¢ En carrito: ${cart?.length || 0}\n\n¬øQuieres ver alg√∫n producto espec√≠fico?`,
        speak: `${totalProducts} productos, ${lowStock} con stock bajo`,
      };
    }
  }
  
  // Preguntas sobre productos espec√≠ficos (muchas variaciones)
  if ((lower.includes('producto') || lower.includes('articulo') || lower.includes('item')) && 
      (lower.includes('tienes') || lower.includes('hay') || lower.includes('muestra') || 
       lower.includes('dime') || lower.includes('lista') || lower.includes('disponibles'))) {
    if (products && Array.isArray(products) && products.length > 0) {
      const top5 = products.slice(0, 5).map(p => `‚Ä¢ ${p.name} - Stock: ${p.stock || 0}`).join('\n');
      return {
        text: `üì¶ PRODUCTOS DISPONIBLES:\n\n${top5}\n\n...y ${products.length - 5} m√°s\n\n¬øBuscas algo espec√≠fico?`,
        speak: `${products.length} productos disponibles`,
      };
    }
  }
  
  // Preguntas sobre ventas (muchas variaciones)
  if ((lower.includes('venta') || lower.includes('ventas')) || 
      (lower.includes('total') || lower.includes('dinero') || lower.includes('ingreso')) ||
      (lower.includes('cuanto') && lower.includes('vendido')) || (lower.includes('hecho'))) {
    if (todayStats) {
      return {
        text: `üí∞ VENTAS DEL D√çA:\n\n‚Ä¢ Total: $${(todayStats.total_amount || 0).toFixed(2)}\n‚Ä¢ Cantidad: ${todayStats.total_sales || 0} ventas\n‚Ä¢ Promedio: $${((todayStats.total_amount || 0) / (todayStats.total_sales || 1)).toFixed(2)}`,
        speak: `${todayStats.total_sales || 0} ventas`,
      };
    }
  }
  
  // Preguntas sobre consejos de venta
  if (lower.includes('consejo') || lower.includes('recomendac') || lower.includes('sugerencia')) {
    return {
      text: `üí° CONSEJOS DE VENTA:\n\n‚Ä¢ Sugiere productos complementarios\n‚Ä¢ Destaca las ofertas activas\n‚Ä¢ Ofrece paquetes o combos\n‚Ä¢ Menciona beneficios del producto\n‚Ä¢ Crea urgencia con stock limitado\n\n¬øNecesitas ayuda con algo espec√≠fico?`,
      speak: null,
    };
  }
  
  // Preguntas sobre estrategias
  if (lower.includes('estrategia') || lower.includes('t√©cnica') || lower.includes('mejora')) {
    return {
      text: `üìà ESTRATEGIAS DE VENTA:\n\n‚Ä¢ Personaliza la experiencia del cliente\n‚Ä¢ Destaca las promociones del d√≠a\n‚Ä¢ Sugiere upsells (productos complementarios)\n‚Ä¢ Aprovecha el cross-selling\n‚Ä¢ Menciona ventajas competitivas\n\n¬øQuieres profundizar en alguna?`,
      speak: null,
    };
  }
  
  // Preguntas sobre atenci√≥n al cliente
  if (lower.includes('atencion') && lower.includes('cliente') && !lower.includes('diabetic')) {
    return {
      text: `üë• ATENCI√ìN AL CLIENTE:\n\n‚Ä¢ Saluda con amabilidad\n‚Ä¢ Escucha activamente\n‚Ä¢ Brinda informaci√≥n √∫til\n‚Ä¢ Mant√©n contacto visual\n‚Ä¢ Ofrece soluciones claras\n‚Ä¢ Despide con una sonrisa\n\n¬øNecesitas m√°s consejos?`,
      speak: null,
    };
  }
  
  // Preguntas m√©dicas/salud (diabetes, alergias, etc.)
  if (lower.includes('diabetic') || lower.includes('diabetes') || lower.includes('diab√©tico')) {
    return {
      text: `‚ö†Ô∏è ATENCI√ìN - PRODUCTOS PARA DIAB√âTICOS:\n\n‚ùå Debe evitar:\n‚Ä¢ Az√∫car refinada\n‚Ä¢ Productos con alto contenido de carbohidratos simples\n‚Ä¢ Alimentos procesados con mucha az√∫car\n‚Ä¢ Refrescos y bebidas azucaradas\n‚Ä¢ Dulces y chocolates con az√∫car\n\n‚úÖ Puede consumir:\n‚Ä¢ Productos sin az√∫car agregada\n‚Ä¢ Frutas naturales\n‚Ä¢ Verduras frescas\n‚Ä¢ Alimentos bajos en carbohidratos\n\nüí° IMPORTANTE: Siempre recomienda consultar con un m√©dico.\n\n¬øQu√© productos espec√≠ficos buscas para ofrecerle?`,
      speak: 'Puede ofrecer productos sin az√∫car',
    };
  }
  
  if (lower.includes('alergi') || lower.includes('intoleran')) {
    return {
      text: `‚ö†Ô∏è ATENCI√ìN - ALERGIAS E INTOLERANCIAS:\n\n‚Ä¢ Pregunta siempre sobre alergias antes de recomendar\n‚Ä¢ Evita productos con al√©rgenos comunes:\n  - Gluten\n  - Lactosa\n  - Frutos secos\n  - Mariscos\n\nüí° IMPORTANTE: Lee siempre las etiquetas y consulta al cliente.\n\n¬øHay alg√∫n producto espec√≠fico que pueda ayudarte a localizar?`,
      speak: null,
    };
  }
  
  if (lower.includes('salud') || lower.includes('nutricion') || lower.includes('calorias')) {
    return {
      text: `ü•ó INFORMACI√ìN NUTRICIONAL:\n\n‚Ä¢ Siempre consulta las etiquetas nutricionales\n‚Ä¢ Ofrece opciones m√°s saludables cuando sea posible\n‚Ä¢ Respeta las preferencias del cliente\n‚Ä¢ Proporciona informaci√≥n sobre ingredientes\n\n¬øBuscas alg√∫n producto espec√≠fico con caracter√≠sticas saludables?`,
      speak: null,
    };
  }
  
  return null;
}

/**
 * Procesa la pregunta con reglas b√°sicas (fallback)
 */
function processBasicRules(question, context) {
  const lower = question.toLowerCase();
  const { total, cart, todayStats } = context;
  
  // Calcular cambios
  if (lower.includes('cambio') || lower.includes('devuelvo')) {
    const match = question.match(/(\d+)/);
    if (match) {
      const paid = parseFloat(match[1]);
      const change = paid - total;
      
      if (change < 0) {
        return {
          text: `‚ùå Necesitas cobrar ${Math.abs(change).toFixed(2)} pesos m√°s.`,
          speak: `Necesitas cobrar ${Math.abs(change).toFixed(2)} pesos m√°s`,
        };
      }
      
      const pesos = Math.floor(change);
      const centavos = Math.round((change - pesos) * 100);
      let text = `üí∞ CAMBIO: ${pesos} pesos`;
      if (centavos > 0) text += ` con ${centavos} centavos`;
      text += `\nTotal: $${change.toFixed(2)}`;
      
      return {
        text,
        speak: centavos > 0 ? `${pesos} pesos con ${centavos} centavos` : `${pesos} pesos`,
      };
    }
    return {
      text: `üí∞ Total: $${total.toFixed(2)}\n\nEscribe "cambio 500" para calcular.`,
      speak: `Total: ${total.toFixed(2)} pesos`,
    };
  }
  
  // Ver total (solo si preguntan por el carrito)
  if ((lower.includes('total') && lower.includes('carrito')) || 
      (lower.includes('cu√°nto') && lower.includes('carrito'))) {
    if (cart?.length === 0) {
      return {
        text: 'üõí El carrito est√° vac√≠o.',
        speak: 'Carrito vac√≠o',
      };
    }
    return {
      text: `üí∞ TOTAL DEL CARRITO: $${total.toFixed(2)}\n\nProductos: ${cart.length}`,
      speak: `Total del carrito: ${total.toFixed(2)} pesos`,
    };
  }
  
  // Ventas del d√≠a
  if (lower.includes('venta') && lower.includes('d√≠a')) {
    return {
      text: `üìä VENTAS DEL D√çA\n\nTotal: ${todayStats?.total_sales || 0}\nIngresos: $${(todayStats?.total_amount || 0).toFixed(2)}`,
      speak: null,
    };
  }
  
  // Stock bajo
  if (lower.includes('stock') && lower.includes('bajo')) {
    return {
      text: `‚ö†Ô∏è ${todayStats?.low_stock_products || 0} productos con stock bajo.`,
      speak: `${todayStats?.low_stock_products || 0} productos con stock bajo`,
    };
  }
  
  // Saludo
  if (lower.includes('hola') || lower.includes('hi')) {
    return {
      text: '¬°Hola! üëã Soy tu asistente AI (IA).\n\n¬øEn qu√© puedo ayudarte?',
      speak: 'Hola',
    };
  }
  
  // Ayuda
  if (lower.includes('ayuda')) {
    return {
      text: `üí° COMANDOS:\n\nüí∞ "cambio 500"\nüìä "ventas hoy"\n‚ö†Ô∏è "stock bajo"\n\nO preg√∫ntame cualquier cosa.`,
      speak: 'Comandos disponibles',
    };
  }
  
  // Preguntas sobre productos
  if (lower.includes('producto') || lower.includes('productos')) {
    if (lower.includes('tienes') || lower.includes('hay') || lower.includes('lista')) {
      return {
        text: 'üì¶ PRODUCTOS DISPONIBLES\n\nTu carrito tiene:\n\n' + 
              (cart?.length > 0 
                ? cart.map(item => `‚Ä¢ ${item.name} - ${item.quantity || item.weight} ${item.sale_type === 'weight' ? item.unit_of_measure || 'kg' : 'unidades'}`).join('\n')
                : 'üõí El carrito est√° vac√≠o.\n\nAgrega productos desde la pantalla de ventas.'),
        speak: null,
      };
    }
    if (lower.includes('m√°s vendido') || lower.includes('popular')) {
      return {
        text: 'üìä PRODUCTOS M√ÅS VENDIDOS\n\nPuedes revisar los productos m√°s vendidos en la secci√≥n de "Reportes" del men√∫.\n\n¬øTe ayudo con algo m√°s?',
        speak: null,
      };
    }
  }

  // Preguntas sobre recomendaciones
  if (lower.includes('recomendac') || lower.includes('consejo') || lower.includes('sugerencia')) {
    return {
      text: 'üí° RECOMENDACIONES\n\n‚Ä¢ Sugiere productos con descuento\n‚Ä¢ Ofrece paquetes o combos\n‚Ä¢ Promociona productos de temporada\n‚Ä¢ Muestra productos relacionados\n\n¬øNecesitas ayuda con algo m√°s?',
      speak: null,
    };
  }
  
  // Respuesta por defecto
  return {
    text: 'ü§î No entend√≠ completamente.\n\nUsa "ayuda" para ver comandos o intenta otra pregunta.',
    speak: null,
  };
}

module.exports = {
  processAIQuestion,
};
